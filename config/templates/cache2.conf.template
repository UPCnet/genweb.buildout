/* This is the default varnish cache server configuration. It uses will
   proxy Plone, which should have Products.CacheSetup installed and
   configured.
   Note that cache.conf is generated from cache.conf.template.
 */

/* Configure zope client as back end */
backend gw {
    .host = "${hosts:balancer}";
    .port = "${ports:balancer2}";
    .connect_timeout = 0.4s;
    .first_byte_timeout = 300s;
    .between_bytes_timeout = 60s;

}

/* Only allow PURGE from localhost */
acl purge {
    "localhost";
    "127.0.0.1";
    "195.77.8.44";  /*fossagegant.upcnet.es */
}

sub vcl_recv {

    /* Send to backend upon receive */

    set req.grace = 120s;

    if (req.request == "PURGE") {
        if (!client.ip ~ purge) {
            error 405 "Not allowed.";
        }
        return(lookup);
    }

    if (req.request != "GET" &&
        req.request != "HEAD" &&
        req.request != "PUT" &&
        req.request != "POST" &&
        req.request != "TRACE" &&
        req.request != "OPTIONS" &&
        req.request != "DELETE") {
        /* Non-RFC2616 or CONNECT which is weird. */
        return(pipe);
    }

    if (req.request != "GET" && req.request != "HEAD") {
        /* We only deal with GET and HEAD by default */
        return(pass);
    }

    if (req.http.If-None-Match) {
        return(pass);
    }

    /* Do not cache AJAX requests */
    if (req.http.X-Requested-With == "XMLHttpRequest") {
        return(pass);
    }

    /*
    if (req.http.If-Modified-Since && req.url ~ "^/VirtualHostBase/http/localhost:80/plone/VirtualHostRoot/$")  {
        unset req.http.If-Modified-Since;
    }
    */

    if (req.url ~ "createObject") {
        return(pass);
    }

    remove req.http.Accept-Encoding;

    return(lookup);

}

sub vcl_pipe {
    /* This is not necessary if you do not do any request rewriting. */
    set req.http.connection = "close";
}

sub vcl_hit {
    if (req.request == "PURGE") {
        purge;
        error 200 "Purged";
    }

    if (!obj.ttl > 0s) {
        return(pass);
    }
}

sub vcl_miss {
    if (req.request == "PURGE") {
        error 404 "Not in cache miss";
    }

}

sub vcl_backend_response {
    set beresp.grace = 120s;

   /*if (!obj.ttl > 0s) {
        set beresp.http.X-Varnish-Action = "FETCH (pass - not cacheable)";
        return(hit_for_pass);
    }*/
    if (beresp.http.Set-Cookie) {
        set beresp.http.X-Varnish-Action = "FETCH (pass - response sets cookie)";
        return(hit_for_pass);
    }
    if (beresp.http.Cache-Control ~ "(private|no-cache|no-store)") {
        set beresp.http.X-Varnish-Action = "FETCH (pass - cache control disallows)";
        return(hit_for_pass);
    }
    if (beresp.http.Authorization && !beresp.http.Cache-Control ~ "public") {
        set beresp.http.X-Varnish-Action = "FETCH (pass - authorized and no public cache control)";
        return(hit_for_pass);
    }

    set beresp.http.X-Varnish-Action = "FETCH (insert)";


}

sub vcl_hash {
    hash_data(req.url);
    hash_data(req.http.host);

    if (req.http.Accept-Encoding ~ "gzip") {
        hash_data("gzip");
    }
    else if (req.http.Accept-Encoding ~ "deflate") {
        hash_data("deflate");
    }

    if (req.http.cookie ~ "I18N_LANGUAGE") {
        hash_data(regsub( req.http.Cookie, "^.*?I18N_LANGUAGE=([^;]*?);*.*$", "\1" ) );
    }


}

sub vcl_deliver {
        if (obj.hits > 0) {
                set resp.http.X-Cache = "HIT varnish2";
        } else {
                set resp.http.X-Cache = "MISS varnish2";
        }
}

