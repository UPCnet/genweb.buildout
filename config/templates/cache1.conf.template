/* This is the default varnish cache server configuration.
   Note that cache.conf is generated from cache.conf.template.
*/

vcl 4.0;

/* Configure zope client as back end */
backend gw {
    .host = "${hosts:balancer}";
    .port = "${ports:balancer1}";
    .connect_timeout = 0.4s;
    .first_byte_timeout = 300s;
    .between_bytes_timeout = 60s;

}

/* Only allow PURGE from localhost */
acl purge_allowed {
    "localhost";
    "127.0.0.1";
    "195.77.8.40";  /* gradefajol.upcnet.es */
}

sub vcl_recv {

    /* Send to backend upon receive */

    /* Purge allowed only from some hosts */
    if (req.method == "PURGE") {
        if (client.ip ~ purge_allowed) {
           return(purge);
        } else {
           return(synth(403, "Purge not allowed from this host. Access denied."));
        }
    }

    if (req.method != "GET" &&
        req.method != "HEAD" &&
        req.method != "PUT" &&
        req.method != "POST" &&
        req.method != "TRACE" &&
        req.method != "OPTIONS" &&
        req.method != "DELETE") {
        /* Non-RFC2616 or CONNECT which is weird. */
        return(pipe);
    }

    if (req.method != "GET" && req.method != "HEAD") {
        /* We only deal with GET and HEAD by default */
        return(pass);
    }

    if (req.http.If-None-Match) {
        return(pass);
    }

    /* Do not cache AJAX requests */
    if (req.http.X-Requested-With == "XMLHttpRequest") {
        return(pass);
    }

    /*
    if (req.http.If-Modified-Since && req.url ~ "^/VirtualHostBase/http/localhost:80/plone/VirtualHostRoot/$")  {
        unset req.http.If-Modified-Since;
    }
    */

    if (req.url ~ "createObject") {
        return(pass);
    }

    unset req.http.Accept-Encoding;

    return(hash);

}

sub vcl_pipe {
    /* This is not necessary if you do not do any request rewriting. */
    set req.http.connection = "close";
}

sub vcl_hit {
    if (!obj.ttl > 0s) {
        return(pass);
    }
}

sub vcl_miss {
    if (req.method == "PURGE") {
        return (synth(404, "Not in cache miss"));
    }

}

sub vcl_backend_response {
    set beresp.grace = 120s;

   /*if (!obj.ttl > 0s) {
        set beresp.http.X-Varnish-Action = "FETCH (pass - not cacheable)";
        set beresp.uncacheable = true;
        set beresp.ttl = 120s;
        return(deliver);
    }*/
    if (beresp.http.Set-Cookie) {
        set beresp.http.X-Varnish-Action = "FETCH (pass - response sets cookie)";
        set beresp.uncacheable = true;
        set beresp.ttl = 120s;
        return(deliver);
    }
    if (beresp.http.Cache-Control ~ "(private|no-cache|no-store)") {
        set beresp.http.X-Varnish-Action = "FETCH (pass - cache control disallows)";
        set beresp.uncacheable = true;
        set beresp.ttl = 120s;
        return(deliver);
    }
    if (beresp.http.Authorization && !beresp.http.Cache-Control ~ "public") {
        set beresp.http.X-Varnish-Action = "FETCH (pass - authorized and no public cache control)";
        set beresp.uncacheable = true;
        set beresp.ttl = 120s;
        return(deliver);
    }

    set beresp.http.X-Varnish-Action = "FETCH (insert)";


}

sub vcl_hash {
    hash_data(req.url);
    hash_data(req.http.host);

    if (req.http.Accept-Encoding ~ "gzip") {
        hash_data("gzip");
    }
    else if (req.http.Accept-Encoding ~ "deflate") {
        hash_data("deflate");
    }

    if (req.http.cookie ~ "I18N_LANGUAGE") {
        hash_data(regsub( req.http.Cookie, "^.*?I18N_LANGUAGE=([^;]*?);*.*$", "\1" ) );
    }


}

sub vcl_deliver {
        if (obj.hits > 0) {
                set resp.http.X-Cache = "HIT varnish1";
        } else {
                set resp.http.X-Cache = "MISS varnish1";
        }
}

